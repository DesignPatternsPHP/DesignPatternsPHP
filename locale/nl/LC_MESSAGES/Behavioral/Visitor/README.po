#
msgid ""
msgstr ""
"Project-Id-Version: DesignPatternsPHP 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 12:18+0200\n"
"PO-Revision-Date: 2020-10-05 23:24+0200\n"
"Last-Translator: RedDevilus\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: nl\n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.1\n"

#: ../../Behavioral/Visitor/README.rst:2
msgid "`Visitor`__"
msgstr "`Bezoeker`__"

#: ../../Behavioral/Visitor/README.rst:5
msgid "Purpose"
msgstr "Doel"

#: ../../Behavioral/Visitor/README.rst:7
msgid ""
"The Visitor Pattern lets you outsource operations on objects to other objects. The main reason to do "
"this is to keep a separation of concerns. But classes have to define a contract to allow visitors "
"(the ``Role::accept`` method in the example)."
msgstr ""
"Met het bezoekerspatroon kunt u bewerkingen aan objecten uitbesteden aan andere objecten. De "
"belangrijkste reden om dit te doen is om de zaken gescheiden te houden. Maar klassen moeten een "
"contract definiëren om bezoekers toe te staan ​​(de methode `` Rol :: accepteren '' in het voorbeeld)."

#: ../../Behavioral/Visitor/README.rst:12
msgid ""
"The contract is an abstract class but you can have also a clean interface. In that case, each "
"Visitor has to choose itself which method to invoke on the visitor."
msgstr ""
"Het contract is een abstracte klasse, maar je kunt ook een schone interface hebben. In dat geval "
"moet elke Bezoeker zelf kiezen welke methode hij op de bezoeker inroept."

#: ../../Behavioral/Visitor/README.rst:17
msgid "UML Diagram"
msgstr "UML Diagram"

#: ../../Behavioral/Visitor/README.rst:24
msgid "Code"
msgstr "Code"

#: ../../Behavioral/Visitor/README.rst:26
msgid "You can also find this code on `GitHub`_"
msgstr "Je kan deze broncode terugvinden op `GitHub`_"

#: ../../Behavioral/Visitor/README.rst:59
msgid "Test"
msgstr "Test"
