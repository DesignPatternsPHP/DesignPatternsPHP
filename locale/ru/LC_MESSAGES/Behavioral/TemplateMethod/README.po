#
msgid ""
msgstr ""
"Project-Id-Version: DesignPatternsPHP 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 12:18+0200\n"
"PO-Revision-Date: 2015-05-30 18:41+0300\n"
"Last-Translator: Eugene Glotov <kivagant@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Language-Team: \n"
"X-Generator: Poedit 1.8.1\n"

#: ../../Behavioral/TemplateMethod/README.rst:2
msgid "`Template Method`__"
msgstr "`Шаблонный Метод <https://ru.wikipedia.org/wiki/Шаблонный_метод_(шаблон_проектирования)>`_ (`Template Method`__)"

#: ../../Behavioral/TemplateMethod/README.rst:5
msgid "Purpose"
msgstr "Назначение"

#: ../../Behavioral/TemplateMethod/README.rst:7
msgid "Template Method is a behavioral design pattern."
msgstr "Шаблонный метод, это поведенческий паттерн проектирования."

#: ../../Behavioral/TemplateMethod/README.rst:9
msgid ""
"Perhaps you have encountered it many times already. The idea is to let "
"subclasses of this abstract template \"finish\" the behavior of an "
"algorithm."
msgstr ""
"Возможно, вы сталкивались с этим уже много раз. Идея состоит в том, чтобы "
"позволить наследникам абстрактного шаблона переопределить поведение "
"алгоритмов родителя."

#: ../../Behavioral/TemplateMethod/README.rst:13
msgid ""
"A.k.a the \"Hollywood principle\": \"Don't call us, we call you.\" This "
"class is not called by subclasses but the inverse. How? With abstraction of "
"course."
msgstr ""
"Как в «Голливудском принципе»: «Не звоните нам, мы сами вам позвоним». Этот "
"класс не вызывается подклассами, но наоборот: подклассы вызываются "
"родителем. Как? С помощью метода в родительской абстракции, конечно."

#: ../../Behavioral/TemplateMethod/README.rst:17
msgid ""
"In other words, this is a skeleton of algorithm, well-suited for framework "
"libraries. The user has just to implement one method and the superclass do "
"the job."
msgstr ""
"Другими словами, это каркас алгоритма, который хорошо подходит для "
"библиотек (в фреймворках, например). Пользователь просто реализует "
"уточняющие методы, а суперкласс делает всю основную работу."

#: ../../Behavioral/TemplateMethod/README.rst:21
msgid ""
"It is an easy way to decouple concrete classes and reduce copy-paste, "
"that's why you'll find it everywhere."
msgstr ""
"Это простой способ изолировать логику в конкретные классы и уменьшить "
"копипаст, поэтому вы повсеместно встретите его в том или ином виде."

#: ../../Behavioral/TemplateMethod/README.rst:25
msgid "UML Diagram"
msgstr "UML Диаграмма"

#: ../../Behavioral/TemplateMethod/README.rst:32
msgid "Code"
msgstr "Код"

#: ../../Behavioral/TemplateMethod/README.rst:34
msgid "You can also find these code on `GitHub`_"
msgstr "Вы можете найти этот код на `GitHub`_"

#: ../../Behavioral/TemplateMethod/README.rst:36
msgid "Journey.php"
msgstr "Journey.php"

#: ../../Behavioral/TemplateMethod/README.rst:42
msgid "BeachJourney.php"
msgstr "BeachJourney.php"

#: ../../Behavioral/TemplateMethod/README.rst:48
msgid "CityJourney.php"
msgstr "CityJourney.php"

#: ../../Behavioral/TemplateMethod/README.rst:55
msgid "Test"
msgstr "Тест"

#: ../../Behavioral/TemplateMethod/README.rst:57
msgid "Tests/JourneyTest.php"
msgstr "Tests/JourneyTest.php"
