#
msgid ""
msgstr ""
"Project-Id-Version: DesignPatternsPHP 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 12:18+0200\n"
"PO-Revision-Date: 2016-04-03 14:43+0200\n"
"Last-Translator: Dominik Liebler <liebler.dominik@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Language-Team: \n"
"X-Generator: Poedit 1.8.7\n"

#: ../../Behavioral/Visitor/README.rst:2
msgid "`Visitor`__"
msgstr "`Visitor`__"

#: ../../Behavioral/Visitor/README.rst:5
msgid "Purpose"
msgstr "Zweck"

#: ../../Behavioral/Visitor/README.rst:7
msgid ""
"The Visitor Pattern lets you outsource operations on objects to other objects. The main reason to do "
"this is to keep a separation of concerns. But classes have to define a contract to allow visitors "
"(the ``Role::accept`` method in the example)."
msgstr ""
"Das Visitor-Muster ermöglicht es, Operationen auf Objekten an andere Objekte zu übergeben. Der "
"Hauptgrund dafür ist Separation Of Concerns. Klassen müssen dafür einen Vertrag definieren, um "
"Besucher „herein zu bitten“ (in der ``Role::accept``Methode in diesem Beispiel)."

#: ../../Behavioral/Visitor/README.rst:12
msgid ""
"The contract is an abstract class but you can have also a clean interface. In that case, each "
"Visitor has to choose itself which method to invoke on the visitor."
msgstr ""
"Der Vertrag ist eine Abstrakte Klasse aber diese kann auch ein sauberes Interface besitzen. In "
"diesem Fall entscheidet jeder Besucher selbst welche Methode er aufruft."

#: ../../Behavioral/Visitor/README.rst:17
msgid "UML Diagram"
msgstr "UML-Diagramm"

#: ../../Behavioral/Visitor/README.rst:24
msgid "Code"
msgstr "Code"

#: ../../Behavioral/Visitor/README.rst:26
msgid "You can also find this code on `GitHub`_"
msgstr "Du findest den Code hierzu auf `GitHub`_"

#: ../../Behavioral/Visitor/README.rst:59
msgid "Test"
msgstr "Test"
